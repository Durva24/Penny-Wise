{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Penny-Wise/app/test/page.tsx"],"sourcesContent":["// components/dashboard/AccountBalanceGraph.tsx\n\"use client\";\n\nimport React, { useState } from 'react';\nimport { \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer \n} from 'recharts';\n\n// Currency formatter for Indian Rupees\nconst formatCurrency = (amount: number) => {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: 'INR',\n    maximumFractionDigits: 0\n  }).format(amount);\n};\n\n// Sample data - replace with your actual data from API\nconst sampleData = [\n  { date: 'Jan 1', balance: 25000 },\n  { date: 'Jan 8', balance: 27500 },\n  { date: 'Jan 15', balance: 26200 },\n  { date: 'Jan 22', balance: 29800 },\n  { date: 'Jan 29', balance: 28500 },\n  { date: 'Feb 5', balance: 31200 },\n  { date: 'Feb 12', balance: 30000 },\n  { date: 'Feb 19', balance: 32500 },\n  { date: 'Feb 26', balance: 35000 },\n  { date: 'Mar 5', balance: 33800 },\n  { date: 'Mar 12', balance: 38000 },\n];\n\n// Skeleton loader component for the graph\nconst GraphSkeleton = () => (\n  <div className=\"animate-pulse space-y-4\">\n    <div className=\"h-8 w-48 bg-gray-200 rounded mb-6\"></div>\n    <div className=\"h-64 w-full bg-gray-200 rounded\"></div>\n    <div className=\"flex justify-between mt-2\">\n      <div className=\"h-3 w-12 bg-gray-200 rounded\"></div>\n      <div className=\"h-3 w-12 bg-gray-200 rounded\"></div>\n      <div className=\"h-3 w-12 bg-gray-200 rounded\"></div>\n      <div className=\"h-3 w-12 bg-gray-200 rounded\"></div>\n      <div className=\"h-3 w-12 bg-gray-200 rounded\"></div>\n    </div>\n  </div>\n);\n\n// Error component\nconst ErrorDisplay = ({ message, retry }: { message: string, retry: () => void }) => (\n  <div className=\"py-6 flex flex-col items-center justify-center text-center\">\n    <div className=\"mb-3 h-12 w-12 rounded-full bg-red-100 flex items-center justify-center\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-red-500\">\n        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n        <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\n        <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\n      </svg>\n    </div>\n    <h4 className=\"text-base font-medium text-gray-900\">Failed to load balance data</h4>\n    <p className=\"mt-1 text-sm text-gray-500\">{message}</p>\n    <button \n      onClick={retry}\n      className=\"mt-4 rounded-lg border border-gray-200 bg-white px-4 py-2 text-sm font-medium text-gray-800 shadow-sm hover:bg-gray-50\"\n    >\n      Try Again\n    </button>\n  </div>\n);\n\n// Custom tooltip for the graph\nconst CustomTooltip = ({ active, payload }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className=\"bg-white p-3 shadow-md rounded-lg border border-gray-200\">\n        <p className=\"text-xs text-gray-500\">{payload[0].payload.date}</p>\n        <p className=\"text-sm font-medium text-gray-900\">\n          {formatCurrency(payload[0].value)}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function AccountBalanceGraph() {\n  const [timeRange, setTimeRange] = useState<'1W' | '1M' | '3M' | '6M' | '1Y'>('1M');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Function to handle time range selection\n  const handleTimeRangeChange = (range: '1W' | '1M' | '3M' | '6M' | '1Y') => {\n    setTimeRange(range);\n    // Here you would typically fetch new data based on the selected range\n    // For now, we'll just simulate loading\n    setIsLoading(true);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 800);\n  };\n\n  // Function to retry loading data\n  const retryLoading = () => {\n    setIsLoading(true);\n    setError(null);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 800);\n  };\n\n  return (\n    <div className=\"rounded-lg border border-gray-200 bg-white p-4 shadow-sm\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Account Balance</h3>\n        \n        {/* Time range selector */}\n        <div className=\"flex space-x-2\">\n          {['1W', '1M', '3M', '6M', '1Y'].map((range) => (\n            <button \n              key={range}\n              onClick={() => handleTimeRangeChange(range as any)}\n              className={`whitespace-nowrap rounded-full px-3 py-1 text-xs font-medium ${\n                timeRange === range \n                  ? 'bg-black text-white' \n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n              }`}\n            >\n              {range}\n            </button>\n          ))}\n        </div>\n      </div>\n      \n      {/* Graph with loading and error states */}\n      {isLoading ? (\n        <GraphSkeleton />\n      ) : error ? (\n        <ErrorDisplay message={error} retry={retryLoading} />\n      ) : (\n        <div className=\"h-72\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart\n              data={sampleData}\n              margin={{ top: 5, right: 5, left: 5, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" vertical={false} stroke=\"#f0f0f0\" />\n              <XAxis \n                dataKey=\"date\" \n                axisLine={false}\n                tickLine={false}\n                tick={{ fontSize: 12, fill: '#6b7280' }}\n                dy={10}\n              />\n              <YAxis \n                tickFormatter={(value) => formatCurrency(value).split('.')[0]}\n                axisLine={false}\n                tickLine={false}\n                tick={{ fontSize: 12, fill: '#6b7280' }}\n                width={60}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              <Line \n                type=\"monotone\" \n                dataKey=\"balance\" \n                stroke=\"#000000\" \n                strokeWidth={2}\n                dot={{ r: 3, fill: '#000000', strokeWidth: 0 }}\n                activeDot={{ r: 5, fill: '#000000', strokeWidth: 0 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n      \n      {/* Summary stats below the graph */}\n      <div className=\"mt-4 pt-3 border-t border-gray-100 grid grid-cols-2 gap-4\">\n        <div>\n          <p className=\"text-xs text-gray-500\">Current Balance</p>\n          <p className=\"text-lg font-medium text-gray-900\">{formatCurrency(38000)}</p>\n        </div>\n        <div className=\"text-right\">\n          <p className=\"text-xs text-gray-500\">Monthly Change</p>\n          <p className=\"text-lg font-medium text-green-600\">+{formatCurrency(5500)} (14.5%)</p>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}